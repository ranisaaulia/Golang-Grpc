// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries.sql

package user_sql

import (
	"context"
)

const selectAllUser = `-- name: SelectAllUser :many
select id, username, password, fullname, is_active, created_by, created_date, modified_date, modified_by from master_user
`

func (q *Queries) SelectAllUser(ctx context.Context) ([]MasterUser, error) {
	rows, err := q.query(ctx, q.selectAllUserStmt, selectAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MasterUser
	for rows.Next() {
		var i MasterUser
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Fullname,
			&i.IsActive,
			&i.CreatedBy,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.ModifiedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectOneUser = `-- name: SelectOneUser :one
select id, username, password, fullname, is_active, created_by, created_date, modified_date, modified_by from master_user where username = $1
`

func (q *Queries) SelectOneUser(ctx context.Context, username string) (MasterUser, error) {
	row := q.queryRow(ctx, q.selectOneUserStmt, selectOneUser, username)
	var i MasterUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Fullname,
		&i.IsActive,
		&i.CreatedBy,
		&i.CreatedDate,
		&i.ModifiedDate,
		&i.ModifiedBy,
	)
	return i, err
}
