// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: app/master-data/user/proto/user.proto

package user_proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAllUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAllUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUserRequestMultiError, or nil if none found.
func (m *GetAllUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Skip

	// no validation rules for Take

	if len(errors) > 0 {
		return GetAllUserRequestMultiError(errors)
	}

	return nil
}

// GetAllUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetAllUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAllUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUserRequestMultiError) AllErrors() []error { return m }

// GetAllUserRequestValidationError is the validation error returned by
// GetAllUserRequest.Validate if the designated constraints aren't met.
type GetAllUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUserRequestValidationError) ErrorName() string {
	return "GetAllUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUserRequestValidationError{}

// Validate checks the field values on GetOneUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOneUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOneUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOneUserRequestMultiError, or nil if none found.
func (m *GetOneUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOneUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	if len(errors) > 0 {
		return GetOneUserRequestMultiError(errors)
	}

	return nil
}

// GetOneUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetOneUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOneUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOneUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOneUserRequestMultiError) AllErrors() []error { return m }

// GetOneUserRequestValidationError is the validation error returned by
// GetOneUserRequest.Validate if the designated constraints aren't met.
type GetOneUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOneUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOneUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOneUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOneUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOneUserRequestValidationError) ErrorName() string {
	return "GetOneUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOneUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOneUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOneUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOneUserRequestValidationError{}

// Validate checks the field values on GetAllUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUserResponseMultiError, or nil if none found.
func (m *GetAllUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsError

	// no validation rules for ErrMessage

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllUserResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllUserResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllUserResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllUserResponseMultiError(errors)
	}

	return nil
}

// GetAllUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetAllUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAllUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUserResponseMultiError) AllErrors() []error { return m }

// GetAllUserResponseValidationError is the validation error returned by
// GetAllUserResponse.Validate if the designated constraints aren't met.
type GetAllUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUserResponseValidationError) ErrorName() string {
	return "GetAllUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUserResponseValidationError{}

// Validate checks the field values on GetOneUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOneUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOneUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOneUserResponseMultiError, or nil if none found.
func (m *GetOneUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOneUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsError

	// no validation rules for ErrMessage

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOneUserResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOneUserResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOneUserResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOneUserResponseMultiError(errors)
	}

	return nil
}

// GetOneUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetOneUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetOneUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOneUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOneUserResponseMultiError) AllErrors() []error { return m }

// GetOneUserResponseValidationError is the validation error returned by
// GetOneUserResponse.Validate if the designated constraints aren't met.
type GetOneUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOneUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOneUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOneUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOneUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOneUserResponseValidationError) ErrorName() string {
	return "GetOneUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOneUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOneUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOneUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOneUserResponseValidationError{}

// Validate checks the field values on UserItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserItemMultiError, or nil
// if none found.
func (m *UserItem) ValidateAll() error {
	return m.validate(true)
}

func (m *UserItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Fullname

	// no validation rules for IsActive

	// no validation rules for CreatedBy

	if all {
		switch v := interface{}(m.GetCreatedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserItemValidationError{
					field:  "CreatedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserItemValidationError{
					field:  "CreatedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserItemValidationError{
				field:  "CreatedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ModifiedBy

	if all {
		switch v := interface{}(m.GetModifiedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserItemValidationError{
					field:  "ModifiedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserItemValidationError{
					field:  "ModifiedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModifiedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserItemValidationError{
				field:  "ModifiedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserItemMultiError(errors)
	}

	return nil
}

// UserItemMultiError is an error wrapping multiple validation errors returned
// by UserItem.ValidateAll() if the designated constraints aren't met.
type UserItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserItemMultiError) AllErrors() []error { return m }

// UserItemValidationError is the validation error returned by
// UserItem.Validate if the designated constraints aren't met.
type UserItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserItemValidationError) ErrorName() string { return "UserItemValidationError" }

// Error satisfies the builtin error interface
func (e UserItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserItemValidationError{}
